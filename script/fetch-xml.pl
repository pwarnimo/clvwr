#!/usr/bin/perl -w
#
# Script      : fetch-xml.pl
# Author(s)   : Pol Warnimont
# Create date : 2015-10-02
# Version     : 0.1
#
# Description : A script which fetches the XML output generated 
#               by corosync.
#
# Changelog
# ---------
#  2015-10-02 : Created script.
#
# License information
# -------------------
#  Copyright (C) 2015  Pol Warnimont
#  
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use DBI;
use Switch;

sub printVer() {
	printf("CLVwr tools - fetch-xml.pl\n");
	printf("A simple script which fetches the XML output generated by corosync.\n");
	printf("FETCH-XML VERSION 0.1 (C) 2015 Pol Warnimont\n");
	printf("FETCH-XML comes with ABSOLUTELY NO WARRANTY!\n");
}

sub printHelp() {
	printf("FETCH-XML Help\n\n");
	printf("Usage: fetch-xml.pl [OPTION]\n\n");
	printf("The following parameters are available:\n");
	printf("  -v : Prints the version of this script.\n");
	printf("  -h : Prints out this help.\n\n");
	printf("If no parameter is specified, the script will try to fetch the XML from the clusters, which are defined in the database.\n");
}

my $numArgs = $#ARGV +1;

if ($numArgs == 1) {
	switch ($ARGV[0]) {
		case "-v" {
			printVer();
			exit 0;
		}

		case "-h" {
			printHelp();
			exit 0;
		}

		else {
			printf("Unknow argument specified!\n");
			printf("Please use the -h parameter to get help.\n");
			exit 1;
		}
	}
}

printf("Initializing...\n");

my ($dbuser, $dbname, $dbpass) = ("clvwrusr", "clvwrdb", "q1w2e3!");

my $dbh = DBI->connect("DBI:mysql:database=" . $dbname, $dbuser, $dbpass);

my $qry = $dbh->prepare("SELECT * FROM tblCluster");

$qry->execute() or die $qry->err_str;

while (my ($id, $ip, $caption, $enabled) = $qry->fetchrow_array()) {
	printf("Receiving XML of cluster %s (%s)...\n", $caption, $id);

	system("scp clvwr@" . $ip . ":/home/clvwr/data/" . $caption . ".xml data/");
}

exit 0;
